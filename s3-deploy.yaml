---
AWSTemplateFormatVersion: '2010-09-09'

Description: S3 Coding Demo

Parameters:

  BucketName:
    Type: String
    Description: The name of the S3 Bucket to create
    Default: 'demo-transfer-'
  CloudtrailBucketName:
    Type: String
    Description: The name of the S3 CloudTrail Bucket to create
    Default: 'demo-cloudtrail-'
  DistroBucketName:
    Type: String
    Description: The name of the Distribution Bucket
    Default: 'eft-distro-east-1'
  DistroPrefix:
    Type: String
    Description: The prefix acting as the home for a release
    Default: 'private4'
  CreateServer:
    AllowedValues:
      - 'true'
      - 'false'
    Type: String
    Description: Whether this stack creates an internal Virus EC2 internally.
    Default: 'true'
  PublicSubnet:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet to use for running Virusserver instances (us-east-2c)
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select VPC
  AWSLinuxAmiId:
    Type: String
    # us-east-1   'ami-0a887e401f7654935'
    Default: 'ami-0947d2ba12ee1ff75'
  NotificationEmail:
    Type: String
    Default: 'steve.p.sonnenberg@gmail.com'
  KeypairName:
    Type: String
    Default: 2020
  VirusHost:
    Type: String
    Description: Hostname or IP of Virus server
    Default: 0.0.0.0


Conditions:
  CreateServer:
    Fn::Equals:
      - Ref: CreateServer
      - 'true'
  NotCreateServer:
    Fn::Not:
      - Condition: CreateServer

Resources:
  LambdaHelperRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CFN-Helper-Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: allowLogging
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:*
              Resource: arn:aws:logs:*:*:*
        - PolicyName: s3Writer
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - s3:DeleteObject
              - s3:DeleteObjectVersion
              - s3:ListBucket
              - s3:ListBucketVersions
              - s3:DeleteBucket
              - s3:PutObject
              - s3:PutObjectAcl
              - s3:PutObjectTagging
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:GetObjectAcl
              - s3:GetObjectTagging
              - s3:GetBucketNotification
              - s3:PutBucketNotification
              Resource: '*'
        - PolicyName: ecrDelete
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - ecr:BatchDeleteImage
              - ecr:DeleteRepository
              Resource:  !Sub 'arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/*'
        - PolicyName: groupDelete
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - iam:GetGroup
              - iam:RemoveUserFromGroup
              Resource:  !Sub 'arn:aws:iam::*:group/*'

  LambdaHelperFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: LambdaCFNHelper
      Code:
        S3Bucket: !Sub ${DistroBucketName}
        S3Key: 
          Fn::Join:
          - "/"
          - - !Sub ${DistroPrefix}
            - Lambda/pyhelper.zip
      Description: Functions to add empty S3 keys
      Handler: lambda_function.handler
      Role:
        Fn::GetAtt: LambdaHelperRole.Arn
      Runtime: python3.7
      Timeout: 30
    DependsOn: LambdaHelperRole

  CloudTrail:
    Type: AWS::CloudTrail::Trail
    DependsOn:
    - S3CloudTrailBucketPolicy
    Properties:
      EventSelectors:
      - IncludeManagementEvents: False
        ReadWriteType: ReadOnly
        DataResources: 
        -  Type: AWS::S3::Object
           Values:
           - !Sub 'arn:aws:s3:::${BucketName}${DistroPrefix}/'
      IsMultiRegionTrail: False
      IncludeGlobalServiceEvents: False
      IsLogging: True
      S3BucketName: !Sub '${CloudtrailBucketName}${DistroPrefix}'
      TrailName: S3Trail

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref LambdaFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub 'arn:aws:s3:::${BucketName}${DistroPrefix}'
      SourceAccount: !Ref AWS::AccountId

  LambdaCloudTrailPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref LambdaFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub 'arn:aws:s3:::${CloudtrailBucketName}${DistroPrefix}'
      SourceAccount: !Ref AWS::AccountId

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Transfer-Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: allowLogging
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
        - PolicyName: s3eftaccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - s3:*
              Resource:  
              - !Sub 'arn:aws:s3:::${BucketName}${DistroPrefix}'
              - !Sub 'arn:aws:s3:::${BucketName}${DistroPrefix}/*'
        - PolicyName: s3listbucketaccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - s3:ListBucket
              Resource: 'arn:aws:s3:::*'
        - PolicyName: s3bucketaccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - s3:HeadBucket
              Resource: '*'
        - PolicyName: s3cloudtrailaccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - s3:GetObject
              Resource:  
                - !Sub 'arn:aws:s3:::${CloudtrailBucketName}${DistroPrefix}/*'
        - PolicyName: s3eftobjaccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - s3:DeleteObjectTagging
              - s3:PutObjectTagging
              - s3:GetObjectTagging
              - s3:PutObject
              - s3:PutObjectAcl
              - s3:GetObject
              - s3:GetObjectAcl
              - s3:DeleteObject
              Resource:  
                - !Sub 'arn:aws:s3:::${BucketName}${DistroPrefix}/*'
        - PolicyName: publishsns
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - sns:Publish
              Resource:  !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:*'
        - PolicyName: runecstask
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - ecs:RunTask
              - ecs:DescribeTasks
              Resource: 
              - !Sub 'arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task/*'
              - !Sub 'arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/*:*'
              - !Sub 'arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/*'
        - PolicyName: networkaccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - ec2:CreateNetworkInterface
              - ec2:DescribeNetworkInterfaces
              - ec2:DeleteNetworkInterface
              Resource: '*'

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub '${DistroBucketName}'
        S3Key:
          Fn::Join:
          - "/"
          - - !Sub '${DistroPrefix}'
            - Lambda/demo.zip
      Description: A function to process S3 uploads.
      FunctionName: S3Notifier
      Handler: s3-code.lambda_handler
      Role:
        Fn::GetAtt: LambdaExecutionRole.Arn
      Runtime: python3.7
      Environment:
        Variables:
          BUCKET: !Sub '${BucketName}${DistroPrefix}'
          TRAILBUCKET: !Sub '${CloudtrailBucketName}${DistroPrefix}'
          VIRUSSCANHOST:
            !If [CreateServer, !GetAtt EC2ScannerInstance.PublicIp, !Ref VirusHost]
          REGION: !Sub ${AWS::Region}
      MemorySize: 128
      Timeout: 300

 # S3Endpoint:
 #   Type: AWS::EC2::VPCEndpoint
 #   Properties:
 #     PolicyDocument:
 #       Version: 2012-10-17
 #       Statement:
 #       - Effect: Allow
 #         Principal: "*"
 #         Action:
 #           - "s3:*"
 #         Resource:
 #           - "*"
 #     RouteTableIds:
 #       - !Ref RouteTableId
 #     ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
 #     VpcEndpointType: Gateway
 #     VpcId: !Ref VpcId

  S3Bucket:
    Type: AWS::S3::Bucket
    DependsOn:
      - LambdaPermission
    Properties:
      # Need to define a static BucketName due to a circular dependency with the AWS::SNS::TopicPolicy
      BucketName: !Sub '${BucketName}${DistroPrefix}'
      AccessControl: BucketOwnerFullControl
      CorsConfiguration:
        CorsRules:
        - 
          AllowedHeaders:
          - '*'
          AllowedMethods:
          - HEAD
          - GET
          - PUT
          AllowedOrigins:
          - !Sub 'https://s3.${AWS::Region}.amazonaws.com'
          ExposedHeaders:
          - ETag
          - x-amz-meta-custom-header
          - x-amz-server-side-encryption
          - x-amz-request-id
          - x-amz-id-2
          - date
          MaxAge: 3000
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            # Id: file-upload
            Function: !GetAtt LambdaFunction.Arn
            Filter:
              S3Key:
                Rules:
                 - Name: prefix
                   Value: 'Transfer'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        -
          Key: Description
          Value: Object Storage
      VersioningConfiguration:
        Status: Suspended

  # If a source AWS Account is going to put objects into the Bucket, keep this resource,
  # if not, this BucketPolicy can be removed.
  # This is a placeholder
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          -
            Sid: PutObjectAccess
            Action:
              - s3:PutObject
            Effect: Allow
            Principal:
              AWS:
              - !Ref AWS::AccountId # Replace with a valid source AWS Account Id
            Resource:
              - !Sub 'arn:aws:s3:::${BucketName}${DistroPrefix}/*'

  # S3 Helpers
  S3BucketModification:
    Type: Custom::S3PutObject
    DependsOn:
      - S3Bucket
    Properties:
      ServiceToken: !GetAtt LambdaHelperFunction.Arn
      Operation: 'notification'
      Bucket: !Sub '${BucketName}${DistroPrefix}'
      Key: 'file-upload'

  S3BucketTransferFolder:
    Type: Custom::S3PutObject
    DependsOn:
      - S3Bucket
    Properties:
      ServiceToken: !GetAtt LambdaHelperFunction.Arn
      Operation: 'mkdir'
      Bucket: !Sub '${BucketName}${DistroPrefix}'
      Key: 'Transfer/'
  S3BucketDeleter:
    Type: Custom::S3PutObject
    DependsOn:
      - S3Bucket
    Properties:
      ServiceToken: !GetAtt LambdaHelperFunction.Arn
      Operation: 'delbucket'
      Bucket: !Sub '${BucketName}${DistroPrefix}'

  S3CloudTrailBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${CloudtrailBucketName}${DistroPrefix}'
      AccessControl: BucketOwnerFullControl
      LifecycleConfiguration:
        Rules:
        - Id: Expire
          Status: Enabled
          ExpirationInDays: 1
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Suspended
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            #Id: audit-create
            Function: !GetAtt LambdaFunction.Arn

  S3CloudTrailBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3CloudTrailBucket
      PolicyDocument:
        Statement:
          - Sid: AWSCloudTrailAclCheck20150319
            Action:
              - s3:GetBucketAcl
            Effect: Allow
            Principal:
              Service:
              - 'cloudtrail.amazonaws.com'
            Resource:
              - !Sub 'arn:aws:s3:::${CloudtrailBucketName}${DistroPrefix}'
          - Sid: AWSCloudTrailWrite20150319
            Action:
              - s3:PutObject
            Effect: Allow
            Principal:
              Service:
              - 'cloudtrail.amazonaws.com'
            Resource:
              - !Sub 'arn:aws:s3:::${CloudtrailBucketName}${DistroPrefix}/*'
            Condition:
              StringEquals:
                s3:x-amz-acl: 
                - 'bucket-owner-full-control'

  S3CloudTrailBucketModification:
    Type: Custom::S3PutObject
    DependsOn:
    - S3CloudTrailBucket
    Properties:
      ServiceToken: !GetAtt LambdaHelperFunction.Arn
      Operation: 'notification'
      Bucket: !Sub '${CloudtrailBucketName}${DistroPrefix}'
      Key: 'audit-create'

  S3CloudTrailBucketDeleter:
    Type: Custom::S3PutObject
    DependsOn:
    - S3CloudTrailBucket
    Properties:
      ServiceToken: !GetAtt LambdaHelperFunction.Arn
      Operation: 'delbucket'
      Bucket: !Sub '${CloudtrailBucketName}${DistroPrefix}'

  SNSUploadTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "Upload Complete"
      TopicName: "obj-upload"
      Subscription:
      - Endpoint: !Sub '${NotificationEmail}'
        Protocol: EMAIL
  SNSDownloadTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "Download Complete"
      TopicName: "obj-download"
      Subscription:
      - Endpoint: !Sub '${NotificationEmail}'
        Protocol: EMAIL
                  
  CloudWatchLogRole:
    Description: IAM role used by Transfer to log API requests to CloudWatch
    Type: AWS::IAM::Role
    Properties:
      RoleName: SFTP-Logging-Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - transfer.amazonaws.com
            Action:
            - sts:AssumeRole
      Policies:
      - PolicyName: TransferLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:DescribeLogStreams
            - logs:PutLogEvents
            Resource:
              Fn::Sub: '*'

  LambdaExecutionRoleGU:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SFTP-LDAP-Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: allowLogging
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
      - PolicyName: lambdaSecretsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - secretsmanager:GetSecretValue
            Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:SFTP/*'
      - PolicyName: lambdaSecretsList
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - secretsmanager:ListSecrets
            Resource: '*'
      - PolicyName: lambdaS3Access
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:PutObject
            - s3:PutObjectAcl
            Resource: !Sub 'arn:aws:s3:::${BucketName}${DistroPrefix}/*'
      - PolicyName: lambdaS3BucketAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:ListBucket
            Resource: !Sub 'arn:aws:s3:::${BucketName}${DistroPrefix}'
      - PolicyName: networkaccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ec2:CreateNetworkInterface
            - ec2:DescribeNetworkInterfaces
            - ec2:DeleteNetworkInterface
            Resource: '*'

  ApiCloudWatchLogsRole:
    Description: IAM role used by API Gateway to log API requests to CloudWatch
    Type: AWS::IAM::Role
    Properties:
      RoleName: API-Logging-Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: ApiGatewayLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:DescribeLogGroups
            - logs:DescribeLogStreams
            - logs:PutLogEvents
            - logs:GetLogEvents
            - logs:FilterLogEvents
            Resource: "*"

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: TransferDemo
      RetentionInDays: 1

  VirusRole:
    Type: AWS::IAM::Role
    Condition: CreateServer
    Properties:
      Description: Role used by Virus Instance
      RoleName: Virus-Instance-Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: S3ObjectAccessPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:GetObjectAcl'
              - 's3:GetObjectTagging'
            Resource: !Sub 'arn:aws:s3:::${DistroBucketName}/${DistroPrefix}/*'

  VirusProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: CreateServer
    Properties:
      InstanceProfileName: VirusProfile
      Roles:
      - !Ref VirusRole

  SGVirus:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateServer
    Properties:
      GroupDescription: Enable LDAP and VirusScan Access
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '3310'
        ToPort: '3310'
        CidrIp: 0.0.0.0/0
        #CidrIp: !Ref SGVirusCidr
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
        #CidrIp: !Ref SGVirusCidr
      VpcId: !Ref VpcId

  #EC2-Instance for VirusScanner (needs memory)
  EC2ScannerInstance:
    Type: AWS::EC2::Instance
    Condition: CreateServer
    #DependsOn:
    #- EC2SFTPServerSecret
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
    Properties:
      InstanceType:
        t2.xlarge
      KeyName: !Ref KeypairName
      ImageId: !Ref AWSLinuxAmiId
      IamInstanceProfile: !Ref VirusProfile
      InstanceInitiatedShutdownBehavior: stop
      # either configure a NAT or a Public IP
      NetworkInterfaces:
      - AssociatePublicIpAddress: 'true'
        DeviceIndex: '0'
        GroupSet: 
        - !Ref SGVirus
        SubnetId: !Ref PublicSubnet
      Tenancy: default
      Tags:
      - Key: Name
        Value: virusscanner
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          HOMEDIR=/home/ec2-user

          yum update -y

          #amazon-linux-extras install ..
          yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm

          echo Installing packages...
          yum install -y clamav clamav-server clamav-update clamav-data clamav-scanner-systemd clamav-server-systemd
          
          # configure virus scanner
          sed -i -e "s/^Example/#Example/" -e "s/^#TCPSocket/TCPSocket/" /etc/clamd.d/scan.conf
          freshclam 
          sed -e "s/%i/scan/g" /usr/lib/systemd/system/clamd@.service > /usr/lib/systemd/system/clamd.service
          systemctl enable /usr/lib/systemd/system/clamd.service
          systemctl start clamd.service

          netstat -tanp | grep LISTEN

          /opt/aws/bin/cfn-signal \
            -e $? \
            --stack ${AWS::StackName} \
            --resource EC2ScannerInstance \
            --region ${AWS::Region}

Outputs:

  StackArn:
    Value:
      Ref: AWS::StackId
  EC2PublicIP:
    Value: 
      Fn::GetAtt: EC2ScannerInstance.PublicIp
    Condition: CreateServer
